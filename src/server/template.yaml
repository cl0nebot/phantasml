AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Phantasml API.

Parameters:
  
  Role:
    Type: String
    
  FromEmail:
    Type: String
  
  FirstAdminEmail:
    Type: String
    
  SiteUrl:
    Type: String
  
  GoogleClientId:
    Type: String

  ResourceBucket:
    Type: String

  BuildTime:
    Type: String  
  
Globals:

  Function:
    Runtime: nodejs8.10
    CodeUri: ../../build/server
    Environment:
        Variables:
          FROM_EMAIL: !Ref FromEmail
          FIRST_ADMIN_EMAIL: !Ref FirstAdminEmail
          SITE_URL: !Ref SiteUrl
          GOOGLE_CLIENT_ID: !Ref GoogleClientId
          RESOURCE_BUCKET: !Ref ResourceBucket
          BUILD_TIME: !Ref BuildTime
    Timeout: 5
    
Resources:

  UserGetStatus:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.getStatus
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/status
            Method: get
   
  UserLogin:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.login
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/login
            Method: post

  UserLogout:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.logout
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/logout
            Method: post

  UserCreate:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.create
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/create
            Method: post

  UserSetup:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.setup
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/setup
            Method: post
            
  UserPasswordReset:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.passwordReset
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/password_reset
            Method: post

  UserPassword:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.password
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/password
            Method: post

  UserConfigure:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.configure
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/configure
            Method: post
            
  UserTransfer:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.transfer
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/transfer
            Method: post
  
  UserCompleteTransfer:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.completeTransfer
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/complete_transfer
            Method: post
            
  UserDelete:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.deleteUser
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/delete
            Method: post
  
  UserGetPreferences:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.getPreferences
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/preferences
            Method: get
  
  UserPutPreferences:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: user.putPreferences
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/user/preferences
            Method: put
            
  AdminGetSettings:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: admin.getSettings
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/admin/settings
            Method: get

  AdminPutSettings:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: admin.putSettings
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/admin/settings
            Method: put

  AdminInvite:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: admin.invite
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/admin/invite
            Method: post

  ResourceList:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.list
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource
            Method: get
            
  ResourceCreate:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.create
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource
            Method: post

  ResourceGetMetadata:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.getMetadata
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource/{id}/metadata
            Method: get

  ResourcePutMetadata:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.putMetadata
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource/{id}/metadata
            Method: put
  
  ResourceGetContent:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.getContent
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource/{id}/content
            Method: get

  ResourcePutContent:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.putContent
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource/{id}/content
            Method: put
            
  ResourceDelete:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: resource.deleteResource
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/resource/{id}
            Method: delete

  HelpReportBug:
    Type: AWS::Serverless::Function
    Properties:
      Role: !Ref Role
      Handler: help.reportBug
      Events:
        Request:
          Type: Api
          Properties:
            Path: /api/help/bug
            Method: post
              
